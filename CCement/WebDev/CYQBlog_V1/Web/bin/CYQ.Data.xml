<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CYQ.Data</name>
    </assembly>
    <members>
        <member name="M:CYQ.Data.MActionUI.AutoSetColumnValue(System.Boolean)">
            <summary>
            自动设置列的值(true为插入,false为更新)
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.DataType">
            <summary>
            数据类型转换类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.Type)">
            <summary>
            将DbType类型对应映射到SqlDbType类型
            </summary>
            <param name="type">DbType类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetSqlType(System.String)">
            <summary>
            将DbType类型字符串表达方式对应映射到SqlDbType类型
            </summary>
            <param name="dbType">DbType类型字符串表达类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.String)">
            <summary>
            将DbType类型字符串表达形式对应映射到DbType类型
            </summary>
            <param name="dbType">DbType类型字符串表达类型</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.DataType.GetDbType(System.Type)">
            <summary>
            将SqlDbType类型对应映射到DbType类型
            </summary>
            <param name="type">SqlDbType类型</param>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.DAL.DbBase">
            <summary>
            数据库操作基类
            </summary>
        </member>
        <member name="T:CYQ.Data.DAL.ParaType">
            <summary>
            特殊参数类型[MProc操作Oracle时用到]
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.ParaType.Cursor">
            <summary>
            游标类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.ParaType.OutPut">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.ParaType.ReturnValue">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.CellValue">
            <summary>
            单元值
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.CellStruct">
            <summary>
            单元结构属性
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataCell">
            <summary>
            单元格
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataTable">
            <summary>
            表格
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.ProcedureSql">
            <summary>
            表结构语句与其它附加语句类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.ProcedureSql.GetTableColumnsByMSSQL">
            <summary>
            数据库不附带说明的字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.SQL.ProcedureSql.IsLogTableExist2000">
            <summary>
            Sql2000数据库带说明的字段
            </summary>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.SQL.OutPutData">
            <summary>
            枚举生成类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.#ctor">
            <summary>
            构造函数[默认数据库链接取自配置项Conn]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.#ctor(System.String)">
            <summary>
            构造函数2[自定义数据库链接配置项
            <param name="conn">web.config下的connectionStrings的name配置项名称,或完整的链接字符串</param>
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.GetSelectBaseOutPutToHtmlForSql2005">
            <summary>
            获取sql2005分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.GetSelectBaseOutPutToHtmlForSql2000">
            <summary>
            获取sql2000分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.GetSelectBaseOutPutToHtmlForOracle">
            <summary>
            获取Oracle分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.OutPutAllTableEnum(CYQ.Data.SQL.TableType,CYQ.Data.SQL.DataBaseType,System.Boolean)">
            <summary>
            输出所有表或视图枚举
            </summary>
             /// <param name="tableType">类型[表/视图/存储过程]</param>
            <param name="dataBaseType">输出是否带说明描述</param>
            <param name="isMutilDataBase">项目是否多个数据库类型</param>
            <example><code>
            OutPutData write = new OutPutData();
            Response.Write(write.OutPutAllTableEnum(TableType.U,DataBaseType.Sql2005,false));
            </code></example>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.OutPutSingleTableFiledEnum(CYQ.Data.SQL.TableType,System.Object)">
            <summary>
            输出单个表字段枚举[在修改完某表字段时派上用场]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.ExeCreateProc(CYQ.Data.SQL.DataBaseType)">
            <summary>
            将生成的存储过程直接执行到数据库中
            </summary>
            <param name="sql2000or2005">数据库类型</param>
            <example><code>
            OutPutData write = new OutPutData();
            Response.Write(write.ExeCreateProc(DataBaseType.Sql2005));
            </code></example>
        </member>
        <member name="M:CYQ.Data.SQL.OutPutData.ExeCreateLogTable(CYQ.Data.SQL.DataBaseType)">
            <summary>
            创建日志记录表
            </summary>
            <returns></returns>
        </member>
        <member name="T:CYQ.Data.DAL.PageSQL">
            <summary>
            分页SQL语句
            </summary>
        </member>
        <member name="T:CYQ.Data.MProc">
            <summary>
            存储过程操作类
            </summary>
            <example><code>
            使用示例：
            实例化：  MProc proc = new MProc(ProcNames.GetList);
            添加参数：proc.Set(GetList.ID, 10);
            获取列表：MDataTable table = proc.ExeMDataTable();
            关闭链接：proc.Close();
            绑定控件：GridView1.DataSource = table;GridView1.DataBind();
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="procNamesEnum">存储过程名称,可通过枚举传入</param>
            <example><code>
                MProc action=new MProc(ProcNames.SelectAll);
            或  MProc action=new MProc("SelectAll");
            或多数据库方式：
            MAction action=new MAction(P_DataBaseNameEnum.SelectAll);
            说明：自动截取数据库链接[P_及Enum为前后缀],取到的数据库配置项为DataBaseNameConn
            U_为表 V_为视图 P_为存储过程
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.#ctor(System.Object,System.String)">
            <summary>
            构造函数2
            </summary>
            <param name="procName">存储过程名称,可通过枚举传入</param>
            <param name="conn">web.config下的connectionStrings的name配置项名称,或完整的链接字符串</param>
            <example><code>
                MProc action=new MProc(ProcNames.SelectAll,"CYQ");
            或  MProc action=new MProc(ProcNames.SelectAll,"server=.;database=CYQ;uid=sa;pwd=123456");
            </code></example>
        </member>
        <member name="M:CYQ.Data.MProc.ResetProc(System.Object)">
            <summary>
             表切存储过程,在操作完A存储过程后，如果需要操作B存储过程,不需要重新new一个MProc,可直接换用本函数切换
            用法参考MAction的ResetTable
            </summary>
            <param name="procNamesEnum"></param>
        </member>
        <member name="M:CYQ.Data.MProc.ExeMDataTable(System.Object[])">
            <summary>
            返回MDataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeNonQuery(System.Object[])">
            <summary>
            返回受影响的行数[用于更新或删除]
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MProc.ExeScalar``1(System.Object[])">
            <summary>
            返回首行首列的单个值
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Close">
            <summary>
            释放资源,等同于调用Dispose
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.Set(System.Object,System.Object)">
            <summary>
            设置存储过程参数
            </summary>
            <param name="paraName">参数名称如["ID"或Users.ID]</param>
            <param name="value">参数值如"11"</param>
        </member>
        <member name="M:CYQ.Data.MProc.Clear">
            <summary>
            清除存储过程参数
            </summary>
        </member>
        <member name="M:CYQ.Data.MProc.EndTransation">
            <summary>
            提交结束事务[默认开启事务,直到调用Close/Disponse时才提交事务]
            如果需要提前结束事务,可调用此方法
            </summary>
        </member>
        <member name="P:CYQ.Data.MProc.ReturnValue">
            <summary>
            存储过程的返回值
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XmlBase.GenerateKey(System.String)">
            <summary>
            从绝对路径中获得文件名做为Key值
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XmlBase.Load(System.String)">
            <summary>
            加载XML
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XmlBase.LoadFromFile(System.String)">
            <summary>
            从文件加载XML
            </summary>
        </member>
        <member name="M:CYQ.Data.Xml.XmlBase.SetCDATA(System.String)">
            <summary>
            给指定的字符加上CDATA
            </summary>
            <param name="ObjectText">对象字符</param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Xml.XmlBase.ReadOnly">
            <summary>
            是否只读，只读时缓存[存取]不再Clone
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XmlBase.DocIsCache">
            <summary>
            文档是否取自缓存
            </summary>
        </member>
        <member name="P:CYQ.Data.Xml.XmlBase.CacheIsChanged">
            <summary>
            Cache发生变化
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.AopEnum">
            <summary>
            框架内部数据库操作方法枚举
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Select">
            <summary>
            查询多条记录方法
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Insert">
            <summary>
            插入方法
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Update">
            <summary>
            更新方法
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Delete">
            <summary>
            删除方法
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.Fill">
            <summary>
            查询一条记录方法
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.GetCount">
            <summary>
            取记录总数
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeMDataTable">
            <summary>
            MProc查询返回MDataTable方法
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeNonQuery">
            <summary>
            MProc执行返回受影响行数方法
            </summary>
        </member>
        <member name="F:CYQ.Data.Aop.AopEnum.ExeScalar">
            <summary>
            MProc执行返回首行首列方法
            </summary>
        </member>
        <member name="T:CYQ.Data.DAL.DalAction">
            <summary>
            数据库类型操作类
            </summary>
        </member>
        <member name="T:CYQ.Data.DAL.DalType">
            <summary>
            操作数据库程序集类型
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.DalValue.Desc">
            <summary>
            对于Bit类型[是/否] 类型的排序
            </summary>
        </member>
        <member name="F:CYQ.Data.DAL.DalValue.True">
            <summary>
            对于Bit类型[是/否] 的条件值
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.Aop">
            <summary>
            内部预先实现空的Aop
            </summary>
        </member>
        <member name="T:CYQ.Data.Aop.IAop">
            <summary>
            Aop接口，需要实现时继承
            </summary>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.Begin(CYQ.Data.Aop.AopEnum,System.String,System.Object[])">
            <summary>
            方法调用之前被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="objName">表名/存储过程名/视图名/sql语句</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.End(CYQ.Data.Aop.AopEnum,System.Boolean,System.Object,System.Object[])">
            <summary>
            方法调用之后被调用
            </summary>
            <param name="action">方法名称</param>
            <param name="success">调用是否成功</param>
            <param name="id">一般调用后的id[或其它值]</param>
            <param name="aopInfo">附带分支参数</param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.OnError(System.String)">
            <summary>
            数据库操作产生异常时,引发此方法
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:CYQ.Data.Aop.IAop.GetFromConfig">
            <summary>
            内部获取配置Aop，外部使用返回null即可。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Xml.XmlHelper.Clear(System.Xml.XmlNode)">
            <summary>
            保留节点,但清除节点所内容/属性
            </summary>
            <param name="OldNode"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XmlHelper.InterChange(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            两个节点交换位置
            </summary>
            <param name="XNodeFirst">第一个节点</param>
            <param name="XNodeLast">第二个节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XmlHelper.ReplaceNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点替换[支持两个的文档间替换]
            </summary>
            <param name="NewXNode"></param>
            <param name="OldXNode"></param>
        </member>
        <member name="M:CYQ.Data.Xml.XmlHelper.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之后插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点后插入NewNode节点</param>
        </member>
        <member name="M:CYQ.Data.Xml.XmlHelper.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            节点之前插入[支持两文档之间的插入]
            </summary>
            <param name="NewNode">要被插入的新节点</param>
            <param name="RefNode">在此节点前插入NewNode节点</param>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.China">
            <summary>
            中文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.English">
            <summary>
            英文
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.French">
            <summary>
            法语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.German">
            <summary>
            德语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Korean">
            <summary>
            韩语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Japanese">
            <summary>
            日语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Hindi">
            <summary>
            印地语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Russian">
            <summary>
             俄语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Italian">
            <summary>
            意大利语
            </summary>
        </member>
        <member name="F:CYQ.Data.Xml.LanguageKey.Custom">
            <summary>
            自定义语言
            </summary>
        </member>
        <member name="T:CYQ.Data.MAction">
            <summary>
            所有表数据操作类
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tableNamesEnum">表名/视图名称</param>
            <example><code>
                MAction action=new MAction(TableNames.Users);
            或  MAction action=new MAction("Users");
            或  MAction action=new MAction("(select m.*,u.UserName from Users u left join Message m on u.ID=m.UserID) v");
            或  MAction action=new MAction(ViewNames.Users);//传视图
            或多数据库方式：
            MAction action=new MAction(U_DataBaseNameEnum.Users);
            说明：自动截取数据库链接[U_及Enum为前后缀],取到的数据库配置项为DataBaseNameConn
            U_为表 V_为视图 P_为存储过程
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.#ctor(System.Object,System.String)">
            <summary>
            构造函数2
            </summary>
            <param name="tableNamesEnum">表名/视图名称</param>
            <param name="conn">web.config下的connectionStrings的name配置项名称,或完整的链接字符串</param>
            <example><code>
                MAction action=new MAction(TableNames.Users,"Conn");
            或  MAction action=new MAction(TableNames.Users,"server=.;database=CYQ;uid=sa;pwd=123456");
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.ResetTable(System.Object)">
            <summary>
            表切换,在A表时，如果需要操作B,不需要重新new一个MAaction,可直接换用本函数切换
            </summary>
            <param name="tableName">要切换的表名</param>
            <example><code>
                MAction action = new MAction(TableNames.Users);
                if (action.Fill("UserName='路过秋天'"))
                {
                    int id = action.Get&lt;int&gt;(Users.ID);
                    if (action.ResetTable(TableNames.Message))
                    {
                        //处理Message表
                        action.Close();
                     }
                 }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Insert">
            <summary>
             插入数据
            </summary>
            <example><code>
            MAction action=new MAction(TableNames.Users);
            action.Set(Users.Username,"路过秋天");
            action.Insert();
            action.Close();
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Insert(System.Boolean,System.Object[])">
            <summary>
            插入数据
            </summary>
            <param name="AutoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix方法设置控件前缀]</param>
            <example><code>
            MAction action=new MAction(TableNames.Users);
            action.SetAutoPrefix("txt","ddl");
            action.Insert(true);
            action.Close();
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object,System.Boolean,System.Object[])">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <param name="AutoSetValue">是否自动获取值[自动从控件获取值,需要先调用SetAutoPrefix方法设置控件前缀]</param>
            <example><code>
            MAction action=new MAction(TableNames.Users);
            action.SetAutoPrefix("txt","ddl");
            action.Update("name='路过秋天'",true);
            action.Close();
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update">
            <summary>
             更新数据[默认ID必须有值]
            </summary>
            <example><code>
            MAction action=new MAction(TableNames.Users);
            action.Set(Users.Username,"路过秋天");
            action.Set(Users.ID,1);
            action.Update();
            action.Close();
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Update(System.Object)">
            <summary>
             更新数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <example><code>
            MAction action=new MAction(TableNames.Users);
            action.Set(Users.Username,"路过秋天");
            action.Update("id=1");
            action.Close();
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Delete">
            <summary>
             删除数据[默认ID必须有值]
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Delete(System.Object,System.Object[])">
            <summary>
             删除数据
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Object[])">
            <summary>
            选择所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.Select(System.Int32,System.Int32,System.String,System.Int32@,System.Object[])">
            <summary>
            带分布功能的选择[多条件查询,选择所有时只需把PageIndex/PageSize设置为0]
            </summary>
            <param name="PageIndex">第几页</param>
            <param name="PageSize">每页数量[为0时默认选择所有]</param>
            <param name="Where"> 查询条件[可附带 order by 语句]</param>
            <param name="RowCount">返回的记录总数</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.Fill(System.Object,System.Object[])">
            <summary>
            填充自身[即单行选择]
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
            <example><code>
            MAction action=new MAction(TableNames.Users);
            if(action.Fill("name='路过秋天'")) //或者action.Fill(888) 或者 action.Fill(id=888)
            {
                action.SetTo(labUserName);
                action.Close();
            }
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetCount(System.String,System.Object[])">
            <summary>
            返回记录总数
            </summary>
            <param name="where">where条件,可直接传id的值如:[88],或传完整where条件如:[id=88 and name='路过秋天']</param>
        </member>
        <member name="M:CYQ.Data.MAction.Close">
            <summary>
            释放资源,等同于调用Disponse
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetTo(System.Object,System.Object,System.Boolean)">
            <summary>
            将值设置到控件中
            </summary>
            <param name="ct">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <param name="value">自定义值,若此值存在，则不从控件中获取值</param>
            <param name="isControlEnabled">控件是否可用</param>
            <example><code>
            示例1：action.SetTo(txtUserName,"路过秋天",true);//等同于：txtUserName.Text="路过秋天";txtUserName.IsEnabled=true;
            示例2：action.SetTo(txtUserName,null,false);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);txtUserName.IsEnabled=false;
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.SetTo(System.Object,System.Object)">
            <summary>
            将值设置到控件中
            </summary>
            <param name="ct">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <param name="value">自定义值,若此值存在，则不从控件中获取值</param>
            <example><code>
            示例1：action.SetTo(txtUserName,"路过秋天",true);//等同于：txtUserName.Text="路过秋天";
            示例2：action.SetTo(txtUserName,null);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.SetTo(System.Object)">
            <summary>
            将值设置到控件中
            </summary>
            <param name="ct">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <example><code>
            示例：action.SetTo(txtUserName);//同于：txtUserName.Text=action.Get&lt;string&gt;(Users.UserName);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetFrom(System.Object,System.Object)">
            <summary>
            将控件的值设置到实体中[默认从控件中自动获取值]
            </summary>
            <param name="ct">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <param name="value">自定义值,若此值存在，则不从控件中获取值</param>
            <example><code>
            示例1：action.GetFrom(txtUserName,"路过秋天");//将自定义值“路过秋天”赋给属性UserName
            示例2：action.GetFrom(txtUserName,null);//将txtUserName.Text的值赋给属性UserName
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.GetFrom(System.Object)">
            <summary>
            将控件的值设置到实体中[默认从控件中自动获取值]
            </summary>
            <param name="ct">控件,目前支持类型为[TextBox/Literal/Label/HiddenField/DropDownList/CheckBox]</param>
            <example><code>
            示例：action.GetFrom(txtUserName);//将txtUserName.Text的值赋给属性UserName
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.Bind(System.Object)">
            <summary>
            [2.0之后增加的功能]绑定控件，该控件需要继承自：ListControl。如DropDown/CheckBoxList/RadioButtonList等。
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.MAction.Get``1(System.Object)">
            <summary>
            取值
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.Set(System.Object,System.Object)">
            <summary>
            设置值,例如:[action.Set(TableName.ID,10);]
            </summary>
            <param name="key">字段名称,可用枚举如:[TableName.ID]</param>
            <param name="value">要设置给字段的值</param>
            <example><code>
            set示例：action.Set(Users.UserName,"路过秋天");
            get示例：int id=action.Get&lt;int&gt;(Users.ID);
            </code></example>
        </member>
        <member name="M:CYQ.Data.MAction.SetAutoPrefix(System.String,System.String[])">
            <summary>
            自动设置前缀,可传多个前缀[至少1个]
            </summary>
            <param name="autoPrefix">第一个前缀[必须]</param>
            <param name="otherPrefix">后面N个前缀[可选]</param>
        </member>
        <member name="M:CYQ.Data.MAction.EndTransation">
            <summary>
            提交结束事务[默认开启事务,直到调用Close/Disponse时才提交事务]
            如果需要提前结束事务,可调用此方法
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetNoAop">
            <summary>
            取消Aop，在Aop独立模块使用MAction时必须调用
            </summary>
        </member>
        <member name="M:CYQ.Data.MAction.SetAop(CYQ.Data.Aop.IAop)">
            <summary>
            主动设置注入的Aop，一般情况下不需要用到。
            </summary>
            <param name="aop"></param>
        </member>
        <member name="M:CYQ.Data.MAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.Data">
            <summary>
            Fill完之后返回的行数据
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.TableName">
            <summary>
            当前的表名
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.ConnectionString">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.DebugInfo">
            <summary>
            调试信息输出,包括sql语句及传输参数
            </summary>
        </member>
        <member name="P:CYQ.Data.MAction.ReturnValue">
            <summary>
            返回值,通常用于记录总数
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.SQLString">
            <summary>
            数据操作语句类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.SQLString.GetInsertSql">
            <summary>
            返回插入的字符串
            </summary>
            <returns>结果如:insert into tableName(ID,Name,Value) values(@ID,@Name,@Value)</returns>
        </member>
        <member name="M:CYQ.Data.SQL.SQLString.GetUpdateSql(System.Object)">
            <summary>
            返回不包括Where条件的字符串
            </summary>
            <returns>结果如:Update tableName set Name=@Name,Value=@Value</returns>
        </member>
        <member name="P:CYQ.Data.JsonHelper.Success">
            <summary>
            是否成功   
            </summary>
        </member>
        <member name="P:CYQ.Data.JsonHelper.ErrorMsg">
            <summary>
            错误提示信息   
            </summary>
        </member>
        <member name="P:CYQ.Data.JsonHelper.Count">
            <summary>
            总记 
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheManage">
            <summary>
            全局缓存类
            </summary>
            <example><code>
            使用示例：
            实例化： CacheManage cache=CacheManage.Instance;
            添加：   cache.Add("路过秋天",new MDataTable);
            判断：   if(cache.Contains("路过秋天"))
                     {
            获取：       MDataTable table=cache.Get("路过秋天") as MDataTable;
                     }
            </code></example>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Get(System.String)">
            <summary>
            获得一个Cache对象
            </summary>
            <param name="key">标识</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Contains(System.String)">
            <summary>
            是否存在缓存
            </summary>
            <param name="key">标识</param>
            <returns></returns>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Add(System.String,System.Object)">
            <summary>
            添加一个Cache对象
            </summary>
            <param name="key">标识</param>
            <param name="value">对象值</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Insert(System.String,System.Object,System.String,System.Int32)">
            <summary>
            相对底层Cache添加方法,添加一个Cache请用Add方法
            </summary>
            <param name="key">标识</param>
            <param name="value">对象值</param>
            <param name="filePath">文件依赖路径</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.Remove(System.String)">
            <summary>
            删除一个Cache对象
            </summary>
            <param name="key">标识</param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.SetChange(System.String,System.Boolean)">
            <summary>
            用户手动设置缓存对象已更改
            </summary>
            <param name="key"></param>
            <param name="change"></param>
        </member>
        <member name="M:CYQ.Data.Cache.CacheManage.GetHasChanged(System.String)">
            <summary>
            获取缓存对象是否已更改
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Count">
            <summary>
            获和缓存总数
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheManage.Instance">
            <summary>
            返回唯一实例
            </summary>
        </member>
        <member name="T:CYQ.Data.Cache.CacheDependencyInfo">
            <summary>
            缓存依赖信息
            </summary>
        </member>
        <member name="P:CYQ.Data.Cache.CacheDependencyInfo.IsChanged">
            <summary>
            系统文件依赖是否发生改变
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataRow">
            <summary>
            一行记录
            </summary>
        </member>
        <member name="M:CYQ.Data.Table.MDataRow.Get``1(System.Object)">
            <summary>
            取值
            </summary>
        </member>
        <member name="P:CYQ.Data.Table.MDataRow.Item(System.Object)">
            <summary>
            输入枚举型数据
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Aop">
            <summary>
            Aop程序集[程序集名称,类名]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.AutoID">
            <summary>
            Oracle 序列ID
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.Domain">
            <summary>
            多国语言时网站主域名[不带www]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.CacheTime">
            <summary>
            缓存时间[分钟]
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.AccessDbNameForWeb">
            <summary>
            Access数据库名称Web站
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.AccessDbNameForApp">
            <summary>
            Access数据库名称Web站
            </summary>
        </member>
        <member name="P:CYQ.Data.AppConfig.LogPath">
            <summary>
            写日志出现异常时，记录到文本文件路径
            </summary>
        </member>
        <member name="T:CYQ.Data.Table.MDataColumn">
            <summary>
            头列表集合
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.TableType">
            <summary>
            输出类型
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.TableType.V">
            <summary>
            视图
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.TableType.U">
            <summary>
            表
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.TableType.P">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.DataBaseType">
            <summary>
            枚举生成数据库类型
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.DataBaseType.Sql2000">
            <summary>
            sql2000数据库字段输出
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.DataBaseType.Sql2005">
            <summary>
            sql2005数据库字段输出
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.DataBaseType.Access">
            <summary>
            Access数据库字段输出
            </summary>
        </member>
        <member name="F:CYQ.Data.SQL.DataBaseType.Oracle">
            <summary>
            Oracel 数据库字段输出
            </summary>
        </member>
        <member name="T:CYQ.Data.SQL.Pager">
            <summary>
            分页存储过程语句类
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.Pager.GetSelectBaseOutPutToHtmlForSql2005">
            <summary>
            获取sql2005分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
        <member name="M:CYQ.Data.SQL.Pager.GetSelectBaseOutPutToHtmlForSql2000">
            <summary>
            获取sql2000分页存储过程[输出带"br换行标签"]
            </summary>
        </member>
    </members>
</doc>
