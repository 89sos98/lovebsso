#region License and Copyright

/*
 * Copyright (c) 2007-2008 by Hornow Science & Technology Co.,Ltd
 * All rights reserved.
 */

#endregion

using System;
using System.Collections;
using System.Security.Principal;
using System.Web;
using System.Web.SessionState;
using Hornow.Common.Configuration;
using Hornow.Common.Core.Utils.Web;
using Hornow.Common.Logging;
using Hornow.Horn.Security.Auth;
using Hornow.Horn.Security.Config;
using Iesi.Collections;

namespace Hornow.Horn.Security.Web
{
    /// <summary>
    /// The SecurityFilter determines which roles are required for a given request by querying all of the Services.
    /// </summary>
    /// <seealso cref="SecurityService">SecurityService
    /// </seealso>
    public class HttpSecurityModule : IHttpModule, IRequiresSessionState 
    {
        #region IHttpModule 成员

        private const string ALREADY_FILTERED = "hn_securityfilter_already_filtered";

        private readonly ILog log = LogManager.GetLogger(typeof(HttpSecurityModule));

        /// <summary>
        /// 保护构造方法
        /// </summary>
        protected HttpSecurityModule()
        {
        }

        /// <summary>
        /// 初始化模块
        /// </summary>
        /// <param name="context"><see cref="HttpApplication"/> 实例</param>
        public void Init(HttpApplication context)
        {
            context.PreRequestHandlerExecute += new EventHandler(this.OnEnter);
        }

        public void Dispose() { }


        private void OnEnter(object sender, EventArgs e)
        {
            // 获取应用程序
            HttpApplication app = (HttpApplication)sender;
            HttpContext context = app.Context;
            HttpRequest req = app.Request;

            string upperRowUrl = req.RawUrl.ToUpperInvariant();

            //不过滤的URL
            IList excludePatterns = GetSecurityConfig().GetExcludeURLPatterns();
            if (null != excludePatterns)
            {
                bool toexclude = false;
                foreach (string pattern in excludePatterns)
                {
                    if (upperRowUrl.Contains(pattern.ToUpperInvariant()))
                    {
                        toexclude = true;
                        break;
                    }
                }
                if (toexclude)
                {
                    return;
                }
            }

            IList filterPatterns = GetSecurityConfig().GetFilterURLPatterns();
            if (null != filterPatterns)
            {
                bool tofilter = false;
                foreach (string pattern in filterPatterns)
                {
                    if (upperRowUrl.Contains(pattern.ToUpperInvariant()))
                    {
                        tofilter = true;
                        break;
                    }
                }
                if (!tofilter)
                {
                    return;
                }
            }

            //是否启用系统安全
            if (!GetSecurityConfig().GetController().IsSecurityEnabled())
            {
                return;
            }

            //过滤非正常请求,如gif等
            if (app.Session == null)
            {
                return;
            }

            //req.Params[ALREADY_FILTERED] = true.ToString();

            if (app.Session[HttpLoginModule.ALREADY_FILTERED] == null)
            {
                log.Warn("LoginFilter not yet applied to this request - terminating filter chain");
                app.CompleteRequest();
                return;
            }

            string originalURL = app.Request.Url.PathAndQuery;
            
            ISet requiredAuthorities = new HashedSet();
            // loop through loaded services and get required roles
            for (IEnumerator iterator = GetSecurityConfig().GetServices().GetEnumerator(); iterator.MoveNext(); )
            {
                SecurityService service = (SecurityService)iterator.Current;
                ISet serviceRoles = service.GetRequiredAuthority(context);
                requiredAuthorities.AddAll(serviceRoles);
            }
            //if (log.IsDebugEnabled)
            //{
            //    log.Debug("requiredAuthorities = " + requiredAuthorities);
            //}

            // whether this URL needs authorisation
            bool needAuth = false;
            // try to get the user (for cookie logins)
            IPrincipal user = GetSecurityConfig().GetAuthenticator().GetUser(context);

            // if we are doing basic authentication, then we don't want to continue the filter chain - we need to commit
            // the response to allow for the authentication challenge mechanism
            if (user == null)
            {
                //app.CompleteRequest();
                //return;
                needAuth = true;
            }
            else
            {
                // set the user in the context
                GetAuthenticationContext().SetUser(user);
                // check if the current user has all required permissions
                // if there is no current user, request.isUserInRole() always returns false so this works
                for (IEnumerator iterator = requiredAuthorities.GetEnumerator(); iterator.MoveNext(); )
                {
                    RequiredAuthority requiredAuthority = (RequiredAuthority)iterator.Current;
                    if (!GetSecurityConfig().GetAccessRightMapper().HasRight(user, context, requiredAuthority))
                    {
                        log.Info("User '" + user + "' needs (and lacks) role '" + requiredAuthority + "' to access " + originalURL);
                        needAuth = true;
                    }
                }
            }
            // check if we're at the login page, in which case do not auth
            if (UrlUtils.IsUrlEquals(UrlUtils.MakeUrlRelative(GetSecurityConfig().GetLoginURL(), req.ApplicationPath), req))
            {
                needAuth = false;
            }

            // if we need to authenticate, store current URL and forward
            if (needAuth)
            {
                app.Session[GetSecurityConfig().GetOriginalURLKey()] = originalURL;
                
                IList needAuthenticateHandlers=  GetSecurityConfig().GetNeedAuthenticateHandlers();
                if(null != needAuthenticateHandlers)
                {
                    foreach (NeedAuthenticateHandler needAuthenticateHandler in needAuthenticateHandlers)
                    {
                        needAuthenticateHandler.Process(app, null, originalURL);
                    }
                }

                // redirect to login page.
                //Redirect(app, null, UrlUtils.MakeUrlRelative(GetSecurityConfig().GetLoginURL(), req.ApplicationPath));
            }
        }

        protected virtual AuthenticationContext GetAuthenticationContext()
        {
            return GetSecurityConfig().GetAuthenticationContext();
        }

        protected virtual SecurityConfig GetSecurityConfig()
        {
            return SecurityConfigAccessor.SecurityConfig;
        }

        private static void Redirect(HttpApplication app, HttpCookie authCookie, string redirectUrl)
        {
            if (redirectUrl == null)
            {
                redirectUrl = app.Request.Url.PathAndQuery;
            }
            if (authCookie != null)
            {
                app.Response.AppendCookie(authCookie);
            }
            app.Response.Redirect(redirectUrl, true);
            app.CompleteRequest();
        }

        #endregion
    }
}