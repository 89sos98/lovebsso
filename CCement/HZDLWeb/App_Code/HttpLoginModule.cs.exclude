#region License and Copyright

/*
 * Copyright (c) 2007-2008 by Hornow Science & Technology Co.,Ltd
 * All rights reserved.
 */

#endregion

using System;
using System.Collections;
using System.Web;
using System.Web.SessionState;
using Hornow.Common.Core.Utils.Text;
using Hornow.Common.Logging;
using Hornow.Horn.App.Plugin.Validation;
using Hornow.Horn.Kernel;
using Hornow.Horn.Security.Auth;
using Hornow.Horn.Security.Config;
using Hornow.Horn.Security.Interceptor;
using Hornow.Horn.UserBase;
using Hornow.Horn.UserBase.Config;

namespace Hornow.Horn.Security.Web
{
    /// <summary>
    /// 权限认证模块的 <see cref="IHttpModule"/>
    /// </summary>
    /// <remarks>
    /// 在web.config中添加如下的配置：
    ///		<code>
    ///			&lt;system.web&gt;
    ///				&lt;httpModules&gt;
    ///					......
    ///					&lt;add name="HttpLoginModule" type="Hornow.Horn.Security.Web.HttpLoginModule, Hornow.Horn.Security" /&gt;
    ///					......
    ///				&lt;/httpModules&gt;
    ///				......
    ///			&lt;/system.web&gt;
    ///		</code>
    /// </remarks>
    /// <summary>This is a filter that logs the user in.</summary>
    /// <remarks>
    /// This is a filter that logs the user in. It works a little like J2EE form-based seraph, except it looks for the
    /// parameters 'os_username' and 'os_password' instead of j_username and j_password.
    /// <p>
    /// The form post/get action should be the URL of the login servlet/JSP/action - given by SecurityFilter.LOGIN_URL.
    /// <p>
    /// If the parameters exist and authentication is successful, the user will be redirected by the filter to the URL given
    /// by the session attribute at SecurityFilter.ORIGINAL_URL_KEY.
    /// <p>
    /// If this URL doesn't exist, it will look for a parameter 'os_destination' to use as the redirected URL instead.
    /// <p>
    /// If neither is found, it is assumed that the page will check the authorisation status and handle redirection itself.
    /// <p>
    /// From the any other filter in the request, or the servlet/JSP/action which processes the request, you can look up the
    /// status of the authorisation attempt. The status is a String request attribute, with the key 'os_authstatus'.
    /// <p>
    /// The possible statuses are:
    /// <ul>
    /// <li> LoginFilter.LOGIN_SUCCESS - the login was processed, and user was logged in
    /// <li> LoginFilter.LOGIN_FAILURE - the login was processed, the user gave a bad username or password
    /// <li> LoginFilter.LOGIN_ERROR - the login was processed, an exception occurred trying to log the user in
    /// <li> LoginFilter.LOGIN_NOATTEMPT - the login was no processed, no form parameters existed
    /// </ul>
    /// </remarks>
    public class HttpLoginModule : IHttpModule, IRequiresSessionState 
    {
        public const string ALREADY_FILTERED = "loginfilter.already.filtered";

        public const string LOGIN_SUCCESS = "success";

        public const string LOGIN_FAILED = "failed";

        public const string LOGIN_ERROR = "error";

        public static readonly string LOGIN_NOATTEMPT = String.Empty;

        public const string HN_AUTHSTATUS_KEY = "hn_authstatus";

        public const string HN_AUTHSTATUS_EXT_KEY = "hn_authstatus_ext";

        private readonly ILog log = LogManager.GetLogger(typeof(HttpLoginModule));

        #region constructor and members
        /// <summary>
        /// 保护构造方法
        /// </summary>
        protected HttpLoginModule()
        {
        }

        /// <summary>
        /// 初始化模块
        /// </summary>
        /// <param name="context"><see cref="HttpApplication"/> 实例</param>
        public void Init(HttpApplication context)
        {
            context.PreRequestHandlerExecute += new EventHandler(this.OnEnter);
        }

        public void Dispose() { }

        private void OnEnter(object source, EventArgs e)
        {
            HttpApplication app = (HttpApplication)source;
            HttpContext context = app.Context;
            HttpRequest req = app.Request;

            string upperRowUrl = req.RawUrl.ToUpperInvariant();

            //不过滤的URL
            IList excludePatterns = GetSecurityConfig().GetExcludeURLPatterns();
            if (null != excludePatterns)
            {
                bool toexclude = false;
                foreach (string pattern in excludePatterns)
                {
                    if (upperRowUrl.Contains(pattern.ToUpperInvariant()))
                    {
                        toexclude = true;
                        break;
                    }
                }
                if (toexclude)
                {
                    return;
                }
            }
           
            IList filterPatterns = GetSecurityConfig().GetFilterURLPatterns();
            if(null != filterPatterns)
            {
                bool tofilter = false;
                foreach (string pattern in filterPatterns)
                {
                    if (upperRowUrl.Contains(pattern.ToUpperInvariant()))
                    {
                        tofilter = true;
                        break;
                    }
                }
                if(!tofilter)
                {
                    return;
                }
            }

            //是否启用系统安全
            if (!GetSecurityConfig().GetController().IsSecurityEnabled())
            {
                return;
            }

            //过滤非正常请求,如gif等
            if (app.Session == null)
            {
                return;
            }

            app.Session[ALREADY_FILTERED] = true.ToString();
            app.Session[HN_AUTHSTATUS_KEY] = LOGIN_NOATTEMPT;

            // check for parameters
            string username = req.Params.Get(SecurityConstants.HN_USERNAME);
            string password = req.Params.Get(SecurityConstants.HN_PASSWORD);
            string loginGuid = req.Params.Get(SecurityConstants.HN_LOGIN_GUID);
            bool persistentLogin = StringUtils.EqualsIgnoreCase("true", req.Params.Get(SecurityConstants.HN_COOKIE));
            bool loggedIn = false;

            // try to login the user if possible
            if (username != null && password != null)
            {
               
                IList interceptors = GetSecurityConfig().GetInterceptors(typeof(LoginInterceptor));
                try
                {
                    for (IEnumerator iterator = interceptors.GetEnumerator(); iterator.MoveNext(); )
                    {
                        IncProgress(context, loginGuid, 1, 20);
                        LoginInterceptor loginInterceptor = (LoginInterceptor)iterator.Current;
                        loginInterceptor.BeforeLogin(context, username, password, persistentLogin);
                    }
                    IncProgress(context, loginGuid, 1, 20);
                    loggedIn = GetAuthenticator().Login(context, username, password, persistentLogin);
                    SetProgress(context, loginGuid, 30);
                    if(loggedIn)
                    {
                        app.Session[HN_AUTHSTATUS_KEY] = LOGIN_SUCCESS;
                    }
                    else
                    {
                        string authStatusExt = app.Session[HN_AUTHSTATUS_EXT_KEY] as string;
                        if(null == authStatusExt)
                        {
                            app.Session[HN_AUTHSTATUS_KEY] = LOGIN_FAILED;   
                        }
                        else
                        {
                            app.Session[HN_AUTHSTATUS_KEY] = authStatusExt;
                            //clear
                            app.Session[HN_AUTHSTATUS_EXT_KEY] = null;
                        }

                        CompleteProgress(context, loginGuid);
                    }
                }
                catch (Exception exp)
                {
                    app.Session[HN_AUTHSTATUS_KEY] = LOGIN_ERROR;
                    CompleteProgress(context, loginGuid);
                    log.Error("Error login :", exp);
                }

                if (loggedIn)
                {
                    if (ServiceBus.GetInstance().GetDefaultContainerException() == null)
                    {
                        ValidationManager vm = ServiceBus.GetInstance().LookupService<ValidationManager>();
                        if (null != vm)
                        {
                            Authentication user = context.Session[SecurityConstants.LOGGED_IN_KEY] as Authentication;
                            if (null != user)
                            {
                                context.Session["ValidationManagerUser"] = user.User.Identity;
                                vm.Register(context);
                                string result = context.Session["ValidationManagerResult"] as string;
                                if (null != result)
                                {
                                    app.Session[HN_AUTHSTATUS_KEY] = result;
                                    app.Session[SecurityConstants.LOGGED_IN_KEY] = null;
                                    CompleteProgress(context, loginGuid);
                                    return;
                                }
                            }
                        }
                    }
                    else
                    {
                        app.Session[HN_AUTHSTATUS_KEY] = "license";
                        return;
                    }
                }
                else
                {
                    CompleteProgress(context, loginGuid);
                    return;
                }

                int interCount = interceptors.Count;
                int incPro = 50 / interCount;
                for (IEnumerator iterator = interceptors.GetEnumerator(); iterator.MoveNext(); )
                {
                    LoginInterceptor loginInterceptor = (LoginInterceptor)iterator.Current;
                    loginInterceptor.AfterLogin(context, username, password, persistentLogin, req.Params.Get(HN_AUTHSTATUS_KEY));
                    IncProgress(context, loginGuid, incPro, 80);
                }
            }

            // if we successfully logged in - look for an original URL to forward to
            if (loggedIn)
            {
                IncProgress(context, loginGuid, 5, 90);
                string originalURL = (string)app.Session[GetSecurityConfig().GetOriginalURLKey()];
                if (originalURL != null)
                {
                    //if (log.IsDebugEnabled)
                    //{
                    //    log.Debug("Logged In - Redirecting to Original URL: " + req.ApplicationPath + originalURL);
                    //}
                    app.Session[GetSecurityConfig().GetOriginalURLKey()] = null;
                    Redirect(app, null, originalURL);
                }
                else
                {
                    if (req.Params.Get(SecurityConstants.HN_DESTINATION) != null)
                    {
                        //if (log.IsDebugEnabled)
                        //{
                        //    log.Debug("Logged In - redirecting to hn_destination: " + req.ApplicationPath + req.Params.Get(SecurityConstants.HN_DESTINATION));
                        //}
                        Redirect(app, null, req.Params.Get(SecurityConstants.HN_DESTINATION));
                    }
                }
                IncProgress(context, loginGuid, 5, 95);
                //CompleteProgress(context, loginGuid);
            }
        }

        protected virtual Authenticator GetAuthenticator()
        {
            return GetSecurityConfig().GetAuthenticator();
        }

        protected virtual SecurityConfig GetSecurityConfig()
        {
            return SecurityConfigAccessor.SecurityConfig;
        }

        private static void Redirect(HttpApplication app, HttpCookie authCookie, string redirectUrl)
        {
            if (redirectUrl == null)
            {
                redirectUrl = app.Request.Url.PathAndQuery;
            }
            if (authCookie != null)
            {
                app.Response.AppendCookie(authCookie);
            }
            app.Response.Redirect(redirectUrl, true);
            app.CompleteRequest();
        }

        public static int GetProgress(HttpContext context, string loginGuid)
        {
            if (!string.IsNullOrEmpty(loginGuid))
            {
                object progress = context.Cache[loginGuid];
                return progress == null ? 1 : (int)progress;
            }
            return 0;
        }

        public static void CompleteProgress(HttpContext context, string loginGuid)
        {
            if (!string.IsNullOrEmpty(loginGuid))
            {
                context.Cache[loginGuid] = 100;
                //context.Cache.Remove(loginGuid);
            }
        }

        public static void SetProgress(HttpContext context, string loginGuid, int progress)
        {
            if (!string.IsNullOrEmpty(loginGuid))
            {
                context.Cache[loginGuid] = progress;
            }
        }

        public static void IncProgress(HttpContext context, string loginGuid, int incProgress, int max)
        {
            if (!string.IsNullOrEmpty(loginGuid))
            {
                object progress = context.Cache[loginGuid];
                int curProgress = (progress == null) ? 1 : (int)progress;

                context.Cache[loginGuid] = (curProgress + incProgress) < max ? (curProgress + incProgress) : max;
            }
        }

        public static void ClearProgress(HttpContext context, string loginGuid)
        {
            if (!string.IsNullOrEmpty(loginGuid))
            {
                context.Cache.Remove(loginGuid);
            }
        }

        #endregion
    }
}